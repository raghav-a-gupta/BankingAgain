
# myModel.BusinessBackground
myModel.BusinessBackground#concept.label = Business Background
myModel.BusinessBackground.BusinessBackground(double,double,double,double,double,long,double,boolean,long,double)#phrase.navigation = a new {Business Background} where {0, capital} {1, existing_loan} {2, existing_working_capital} {3, loan_with_other_banks} {4, net_profit} {5, number_of_employees} {6, turnover} {7, working_capital_facility_takeover_needed} {8, years_audit_record_available} {9, years_is_business}
myModel.BusinessBackground.capital#phrase.action = set the capital of {this} to {capital}
myModel.BusinessBackground.capital#phrase.addition_setter = add {capital} to the capital of {this}
myModel.BusinessBackground.capital#phrase.navigation = {capital} of {this}
myModel.BusinessBackground.capital#phrase.subtraction_setter = subtract {capital} from the capital of {this}
myModel.BusinessBackground.existing_loan#phrase.action = set the existing_loan of {this} to {existing_loan}
myModel.BusinessBackground.existing_loan#phrase.addition_setter = add {existing_loan} to the existing_loan of {this}
myModel.BusinessBackground.existing_loan#phrase.navigation = {existing_loan} of {this}
myModel.BusinessBackground.existing_loan#phrase.subtraction_setter = subtract {existing_loan} from the existing_loan of {this}
myModel.BusinessBackground.existing_working_capital#phrase.action = set the existing_working_capital of {this} to {existing_working_capital}
myModel.BusinessBackground.existing_working_capital#phrase.addition_setter = add {existing_working_capital} to the existing_working_capital of {this}
myModel.BusinessBackground.existing_working_capital#phrase.navigation = {existing_working_capital} of {this}
myModel.BusinessBackground.existing_working_capital#phrase.subtraction_setter = subtract {existing_working_capital} from the existing_working_capital of {this}
myModel.BusinessBackground.loan_with_other_banks#phrase.action = set the loan_with_other_banks of {this} to {loan_with_other_banks}
myModel.BusinessBackground.loan_with_other_banks#phrase.addition_setter = add {loan_with_other_banks} to the loan_with_other_banks of {this}
myModel.BusinessBackground.loan_with_other_banks#phrase.navigation = {loan_with_other_banks} of {this}
myModel.BusinessBackground.loan_with_other_banks#phrase.subtraction_setter = subtract {loan_with_other_banks} from the loan_with_other_banks of {this}
myModel.BusinessBackground.net_profit#phrase.action = set the net_profit of {this} to {net_profit}
myModel.BusinessBackground.net_profit#phrase.addition_setter = add {net_profit} to the net_profit of {this}
myModel.BusinessBackground.net_profit#phrase.navigation = {net_profit} of {this}
myModel.BusinessBackground.net_profit#phrase.subtraction_setter = subtract {net_profit} from the net_profit of {this}
myModel.BusinessBackground.number_of_employees#phrase.action = set the number_of_employees of {this} to {number_of_employees}
myModel.BusinessBackground.number_of_employees#phrase.addition_setter = add {number_of_employees} to the number_of_employees of {this}
myModel.BusinessBackground.number_of_employees#phrase.navigation = {number_of_employees} of {this}
myModel.BusinessBackground.number_of_employees#phrase.subtraction_setter = subtract {number_of_employees} from the number_of_employees of {this}
myModel.BusinessBackground.turnover#phrase.action = set the turnover of {this} to {turnover}
myModel.BusinessBackground.turnover#phrase.addition_setter = add {turnover} to the turnover of {this}
myModel.BusinessBackground.turnover#phrase.navigation = {turnover} of {this}
myModel.BusinessBackground.turnover#phrase.subtraction_setter = subtract {turnover} from the turnover of {this}
myModel.BusinessBackground.working_capital_facility_takeover_needed#phrase.action[0] = {this} gets working_capital_facility_takeover_needed only if {working_capital_facility_takeover_needed}
myModel.BusinessBackground.working_capital_facility_takeover_needed#phrase.action[1] = make it {working_capital_facility_takeover_needed} that {this} is working_capital_facility_takeover_needed
myModel.BusinessBackground.working_capital_facility_takeover_needed#phrase.action[1].deprecated = true
myModel.BusinessBackground.working_capital_facility_takeover_needed#phrase.navigation = {this} is working_capital_facility_takeover_needed
myModel.BusinessBackground.working_capital_facility_takeover_needed#phrase.negative_predicate = {this} is not working_capital_facility_takeover_needed
myModel.BusinessBackground.working_capital_facility_takeover_needed#phrase.negative_predicate_setter = {this} does not get working_capital_facility_takeover_needed
myModel.BusinessBackground.working_capital_facility_takeover_needed#phrase.positive_predicate_setter = {this} gets working_capital_facility_takeover_needed
myModel.BusinessBackground.years_audit_record_available#phrase.action = set the years_audit_record_available of {this} to {years_audit_record_available}
myModel.BusinessBackground.years_audit_record_available#phrase.addition_setter = add {years_audit_record_available} to the years_audit_record_available of {this}
myModel.BusinessBackground.years_audit_record_available#phrase.navigation = {years_audit_record_available} of {this}
myModel.BusinessBackground.years_audit_record_available#phrase.subtraction_setter = subtract {years_audit_record_available} from the years_audit_record_available of {this}
myModel.BusinessBackground.years_is_business#phrase.action = set the years_is_business of {this} to {years_is_business}
myModel.BusinessBackground.years_is_business#phrase.addition_setter = add {years_is_business} to the years_is_business of {this}
myModel.BusinessBackground.years_is_business#phrase.navigation = {years_is_business} of {this}
myModel.BusinessBackground.years_is_business#phrase.subtraction_setter = subtract {years_is_business} from the years_is_business of {this}

# myModel.Customer
myModel.Customer#concept.label = Customer
myModel.Customer.Customer(boolean,java.lang.String,double)#phrase.navigation = a new {Customer} where {0, bankruptcy} {1, country_code} {2, credit_score}
myModel.Customer.bankruptcy#phrase.action[0] = {this} gets bankruptcy only if {bankruptcy}
myModel.Customer.bankruptcy#phrase.action[1] = make it {bankruptcy} that {this} is bankruptcy
myModel.Customer.bankruptcy#phrase.action[1].deprecated = true
myModel.Customer.bankruptcy#phrase.navigation = {this} is bankruptcy
myModel.Customer.bankruptcy#phrase.negative_predicate = {this} is not bankruptcy
myModel.Customer.bankruptcy#phrase.negative_predicate_setter = {this} does not get bankruptcy
myModel.Customer.bankruptcy#phrase.positive_predicate_setter = {this} gets bankruptcy
myModel.Customer.country_code#phrase.action = set the country_code of {this} to {country_code}
myModel.Customer.country_code#phrase.navigation = {country_code} of {this}
myModel.Customer.credit_score#phrase.action = set the credit_score of {this} to {credit_score}
myModel.Customer.credit_score#phrase.addition_setter = add {credit_score} to the credit_score of {this}
myModel.Customer.credit_score#phrase.navigation = {credit_score} of {this}
myModel.Customer.credit_score#phrase.subtraction_setter = subtract {credit_score} from the credit_score of {this}

# myModel.LoanPackage
myModel.LoanPackage#concept.label = Loan Package
myModel.LoanPackage.LoanPackage(double,double,double,double,long)#phrase.navigation = a new {Loan Package} where {0, max_amount} {1, min_amount} {2, processing_fee} {3, rate_of_interest} {4, tennure_months}
myModel.LoanPackage.max_amount#phrase.action = set the max_amount of {this} to {max_amount}
myModel.LoanPackage.max_amount#phrase.addition_setter = add {max_amount} to the max_amount of {this}
myModel.LoanPackage.max_amount#phrase.navigation = {max_amount} of {this}
myModel.LoanPackage.max_amount#phrase.subtraction_setter = subtract {max_amount} from the max_amount of {this}
myModel.LoanPackage.min_amount#phrase.action = set the min_amount of {this} to {min_amount}
myModel.LoanPackage.min_amount#phrase.addition_setter = add {min_amount} to the min_amount of {this}
myModel.LoanPackage.min_amount#phrase.navigation = {min_amount} of {this}
myModel.LoanPackage.min_amount#phrase.subtraction_setter = subtract {min_amount} from the min_amount of {this}
myModel.LoanPackage.processing_fee#phrase.action = set the processing_fee of {this} to {processing_fee}
myModel.LoanPackage.processing_fee#phrase.addition_setter = add {processing_fee} to the processing_fee of {this}
myModel.LoanPackage.processing_fee#phrase.navigation = {processing_fee} of {this}
myModel.LoanPackage.processing_fee#phrase.subtraction_setter = subtract {processing_fee} from the processing_fee of {this}
myModel.LoanPackage.rate_of_interest#phrase.action = set the rate_of_interest of {this} to {rate_of_interest}
myModel.LoanPackage.rate_of_interest#phrase.addition_setter = add {rate_of_interest} to the rate_of_interest of {this}
myModel.LoanPackage.rate_of_interest#phrase.navigation = {rate_of_interest} of {this}
myModel.LoanPackage.rate_of_interest#phrase.subtraction_setter = subtract {rate_of_interest} from the rate_of_interest of {this}
myModel.LoanPackage.tennure_months#phrase.action = set the tennure_months of {this} to {tennure_months}
myModel.LoanPackage.tennure_months#phrase.addition_setter = add {tennure_months} to the tennure_months of {this}
myModel.LoanPackage.tennure_months#phrase.navigation = {tennure_months} of {this}
myModel.LoanPackage.tennure_months#phrase.subtraction_setter = subtract {tennure_months} from the tennure_months of {this}

# myModel.Rejection
myModel.Rejection#concept.label = Rejection
myModel.Rejection.Rejection(java.lang.String,boolean)#phrase.navigation = a new {Rejection} where {0, reason} {1, rejected}
myModel.Rejection.reason#phrase.action = set the reason of {this} to {reason}
myModel.Rejection.reason#phrase.navigation = {reason} of {this}
myModel.Rejection.rejected#phrase.action[0] = {this} gets rejected only if {rejected}
myModel.Rejection.rejected#phrase.action[1] = make it {rejected} that {this} is rejected
myModel.Rejection.rejected#phrase.action[1].deprecated = true
myModel.Rejection.rejected#phrase.navigation = {this} is rejected
myModel.Rejection.rejected#phrase.negative_predicate = {this} is not rejected
myModel.Rejection.rejected#phrase.negative_predicate_setter = {this} does not get rejected
myModel.Rejection.rejected#phrase.positive_predicate_setter = {this} gets rejected
